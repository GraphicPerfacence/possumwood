{
    "connections": [
        {
            "in_node": "draw_0",
            "in_port": "vertex_data",
            "out_node": "background_0",
            "out_port": "vertex_data"
        },
        {
            "in_node": "viewport_0",
            "in_port": "in_uniforms",
            "out_node": "float_0",
            "out_port": "out_uniforms"
        },
        {
            "in_node": "program_0",
            "in_port": "fragment_shader",
            "out_node": "fragment_shader_0",
            "out_port": "shader"
        },
        {
            "in_node": "draw_0",
            "in_port": "program",
            "out_node": "program_0",
            "out_port": "program"
        },
        {
            "in_node": "float_0",
            "in_port": "value",
            "out_node": "time_0",
            "out_port": "time"
        },
        {
            "in_node": "program_0",
            "in_port": "vertex_shader",
            "out_node": "vertex_shader_0",
            "out_port": "shader"
        },
        {
            "in_node": "draw_0",
            "in_port": "uniforms",
            "out_node": "viewport_0",
            "out_port": "out_uniforms"
        },
        {
            "in_node": "texture_0",
            "in_port": "value",
            "out_node": "load_0",
            "out_port": "image"
        }
    ],
    "nodes": {
        "background_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 216.375,
                    "y": 624.5
                }
            },
            "name": "background",
            "type": "render/vertex_data/background"
        },
        "draw_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 427.0625,
                    "y": 531.875
                }
            },
            "name": "draw",
            "type": "render/draw"
        },
        "float_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 91.9375,
                    "y": 891.625
                }
            },
            "name": "float",
            "ports": {
                "name": "iTime"
            },
            "type": "render/uniforms/float"
        },
        "fragment_shader_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 49.1875,
                    "y": 550.125
                }
            },
            "name": "fragment_shader",
            "ports": {
                "source": "#version 130\n\n// generic attributes\nuniform mat4 iProjection;  // projection matrix\nuniform mat4 iModelView;   // modelview matrix\nuniform vec2 iResolution;  // viewport resolution\nuniform float iTime;\n\n// attributes useable for raytracing\nin vec3 iNearPosition;     // position of fragment-corresponding point on near plane\nin vec3 iFarPosition;      // position of fragment-corresponding point on far plane\n\n// output colour\nout vec4 color;\n\n// Heavily inspired by cloudy sunset by miloszmaki\n// https://www.shadertoy.com/view/XlsXDB\n\n#define saturate(x) clamp(x,0.0,1.0)\n#define rgb(r,g,b) (vec3(r,g,b)/255.0)\n\nfloat rand(float x) { \n\treturn fract(sin(x) * 71523.5413291); \n}\n\n\nfloat rand(vec2 x) { \n\treturn rand(dot(x, vec2(13.4251, 15.5128))); \n}\n\nfloat noise(vec2 x) {\n    vec2 i = floor(x);\n    vec2 f = x - i;\n    f *= f*(3.-2.*f);\n    return mix(mix(rand(i), rand(i+vec2(1,0)), f.x),\n               mix(rand(i+vec2(0,1)), rand(i+vec2(1,1)), f.x), f.y);\n}\n\nfloat fbm(vec2 x) {\n    float r = 0.0, s = 1.0, w = 1.0;\n    for (int i=0; i<5; i++) {\n        s *= 2.0;\n        w *= 0.5;\n        r += w * noise(s * x);\n    }\n    return r;\n}\n\nfloat cloud(vec2 uv, float scalex, float scaley, float density, float sharpness, float speed) {\n    return pow(saturate(fbm(vec2(scalex,scaley)*(uv+vec2(speed,0)*iTime))-(1.0-density)), 1.0-sharpness);\n}\n\nvec3 render(vec2 uv) {\n    // sky\n    vec3 color = mix(rgb(166,212,255), rgb(204,235,255), uv.y);\n    // sun\n    vec2 spos = uv - vec2(0., 0.4);\n    float sun = exp(-20.*dot(spos,spos));\n    vec3 scol = rgb(255,155,102) * sun * 0.7;\n    color += scol;\n    // clouds\n    vec3 cl1 = mix(rgb(151,138,153), rgb(166,191,224),uv.y);\n    float d1 = mix(0.9,0.1,pow(uv.y, 0.7));\n    color = mix(color, cl1, cloud(uv,2.,8.,d1,0.4,0.04));\n    color = mix(color, vec3(0.9), 8.*cloud(uv,14.,18.,0.9,0.75,0.02) * cloud(uv,2.,5.,0.6,0.15,0.01)*uv.y);\n    color = mix(color, vec3(0.8), 5.*cloud(uv,12.,15.,0.9,0.75,0.03) * cloud(uv,2.,8.,0.5,0.0,0.02)*uv.y);\n    // post\n    color *= vec3(1.0,0.93,0.81)*1.04;\n    color = mix(0.75*rgb(255,205,161), color, smoothstep(-0.1,0.3,uv.y));\n    color = pow(color,vec3(1.3));\n    return color;\n}\n\nvoid main() {\n\tvec3 rd = normalize(iFarPosition - iNearPosition);\n\tcolor = vec4(render(vec2(atan(rd.x, rd.z) * 3.1415, rd.y)),1.0);\n}\n"
            },
            "type": "render/fragment_shader"
        },
        "load_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": -129.4375,
                    "y": 662.5625
                }
            },
            "name": "load",
            "ports": {
                "filename": "$EXAMPLES/hdrihaven_envmaps/misty_pines_4k.png"
            },
            "type": "images/load"
        },
        "program_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 222.0,
                    "y": 472.0
                }
            },
            "name": "program",
            "type": "render/program"
        },
        "texture_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 79.9375,
                    "y": 704.75
                }
            },
            "name": "texture",
            "ports": {
                "name": "envmap"
            },
            "type": "render/uniforms/texture"
        },
        "time_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": -41.5625038146973,
                    "y": 905.0625
                }
            },
            "name": "time",
            "type": "time"
        },
        "vertex_shader_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 77.0625,
                    "y": 430.3125
                }
            },
            "name": "vertex_shader",
            "ports": {
                "source": "#version 130\n\n// input position from the CPU\nin vec3 position;\n\n// near and far per-vertex world positions, useable for raytracing in the fragment shader\nin vec3 iNearPositionVert;\nin vec3 iFarPositionVert;\nout vec3 iNearPosition;\nout vec3 iFarPosition;\n\nvoid main() {\n\t// do not do any transformation - this should lead to a single quad covering the whole viewport\n\tgl_Position = vec4(position.x, position.y, position.z, 1); \n\t// just pass the near and far positions - they'll get linearly interpolated\n\tiNearPosition = iNearPositionVert;\n\tiFarPosition = iFarPositionVert;\n}\n"
            },
            "type": "render/vertex_shader"
        },
        "viewport_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 254.75,
                    "y": 887.625
                }
            },
            "name": "viewport",
            "type": "render/uniforms/viewport"
        }
    },
    "scene_config": {
        "end_time": 5.0,
        "fps": 24.0,
        "start_time": 0.0
    },
    "ui_geometry": "AdnQywACAAAAAAAAAAAAAAAABqoAAAOeAAAAAAAAABkAAAQ6AAACNQAAAAACAAAABqs=",
    "ui_state": "AAAA/wAAAAD9AAAAAgAAAAAAAAJ4AAADHvwCAAAAAfsAAAAKAGcAcgBhAHAAaAEAAABrAAADHgAAAGwBAAADAAAAAQAAAm0AAAMe/AIAAAAD+wAAABQAcAByAG8AcABlAHIAdABpAGUAcwEAAABrAAAB0gAAAGwBAAAD+wAAAAwAZQBkAGkAdABvAHIBAAACPgAAAUsAAACGAQAAA/sAAAAGAGwAbwBnAQAAAqUAAAFcAAAAAAAAAAAAAAHEAAADHgAAAAQAAAAEAAAACAAAAAj8AAAAAQAAAAIAAAAA"
}

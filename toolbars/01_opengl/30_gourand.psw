{
    "connections": [
        {
            "in_node": "viewport_0",
            "in_port": "in_uniforms",
            "out_node": "float_0",
            "out_port": "out_uniforms"
        },
        {
            "in_node": "program_0",
            "in_port": "fragment_shader",
            "out_node": "fragment_shader_0",
            "out_port": "shader"
        },
        {
            "in_node": "program_1",
            "in_port": "fragment_shader",
            "out_node": "fragment_shader_1",
            "out_port": "shader"
        },
        {
            "in_node": "vertex_data_0",
            "in_port": "generic_mesh",
            "out_node": "loader_0",
            "out_port": "generic_polymesh"
        },
        {
            "in_node": "vertex_data_1",
            "in_port": "generic_mesh",
            "out_node": "loader_1",
            "out_port": "generic_polymesh"
        },
        {
            "in_node": "draw_0",
            "in_port": "program",
            "out_node": "program_0",
            "out_port": "program"
        },
        {
            "in_node": "draw_1",
            "in_port": "program",
            "out_node": "program_1",
            "out_port": "program"
        },
        {
            "in_node": "float_0",
            "in_port": "value",
            "out_node": "time_0",
            "out_port": "time"
        },
        {
            "in_node": "draw_0",
            "in_port": "vertex_data",
            "out_node": "vertex_data_0",
            "out_port": "vertex_data"
        },
        {
            "in_node": "draw_1",
            "in_port": "vertex_data",
            "out_node": "vertex_data_1",
            "out_port": "vertex_data"
        },
        {
            "in_node": "program_0",
            "in_port": "vertex_shader",
            "out_node": "vertex_shader_0",
            "out_port": "shader"
        },
        {
            "in_node": "program_1",
            "in_port": "vertex_shader",
            "out_node": "vertex_shader_1",
            "out_port": "shader"
        },
        {
            "in_node": "draw_0",
            "in_port": "uniforms",
            "out_node": "viewport_0",
            "out_port": "out_uniforms"
        },
        {
            "in_node": "draw_1",
            "in_port": "uniforms",
            "out_node": "viewport_0",
            "out_port": "out_uniforms"
        }
    ],
    "description": "## Gourand shading\n\n[Gourand shading](https://en.wikipedia.org/wiki/Gouraud_shading) is one of the simplest method of polygonal mesh shading. It computes colour by linearly interpolating vertex colours in screen space, making it cheap but less physically accurate than Phong or physics-based shading methods.\n\nThis demo combines [Gourand shading](https://en.wikipedia.org/wiki/Gouraud_shading) with [Phong reflection](https://en.wikipedia.org/wiki/Phong_reflection_model) model, reproducing an old \"fixed-pipeline\" shading model of OpenGL.",
    "nodes": {
        "draw_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 444.868072509766,
                    "y": 1152.80627441406
                }
            },
            "name": "draw",
            "type": "render/draw"
        },
        "draw_1": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 309.300933837891,
                    "y": 770.353149414062
                }
            },
            "name": "draw",
            "type": "render/draw"
        },
        "float_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 435.709442138672,
                    "y": 381.121215820312
                }
            },
            "name": "time",
            "ports": {
                "name": "time"
            },
            "type": "render/uniforms/float"
        },
        "fragment_shader_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 61.7322463989258,
                    "y": 1103.24084472656
                }
            },
            "name": "fragment_shader",
            "ports": {
                "source": "#version 130 \n \nout vec4 result; \n \nin vec3 colour; \n \nvoid main() { \n\tresult = vec4(colour, 1); \n} \n"
            },
            "type": "render/fragment_shader"
        },
        "fragment_shader_1": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": -85.0831451416016,
                    "y": 729.1650390625
                }
            },
            "name": "fragment_shader",
            "ports": {
                "source": "#version 130 \n \nout vec4 color; \n \nvoid main() { \n\tcolor = vec4(1); \n} \n"
            },
            "type": "render/fragment_shader"
        },
        "loader_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 57.6058006286621,
                    "y": 1214.96496582031
                }
            },
            "name": "loader",
            "ports": {
                "filename": "$EXAMPLES/fsu_models/teapot.obj"
            },
            "type": "polymesh/loader"
        },
        "loader_1": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": -91.8187866210938,
                    "y": 842.451721191406
                }
            },
            "name": "loader",
            "ports": {
                "filename": "$EXAMPLES/sphere_lowres.obj"
            },
            "type": "polymesh/loader"
        },
        "program_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 234.732238769531,
                    "y": 1050.24084472656
                }
            },
            "name": "program",
            "type": "render/program"
        },
        "program_1": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 87.916862487793,
                    "y": 677.7275390625
                }
            },
            "name": "program",
            "type": "render/program"
        },
        "time_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 315.779296875,
                    "y": 436.084075927734
                }
            },
            "name": "time",
            "type": "time"
        },
        "vertex_data_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 247.077072143555,
                    "y": 1210.275390625
                }
            },
            "name": "vertex_data",
            "type": "polymesh/vertex_data"
        },
        "vertex_data_1": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 89.8249206542969,
                    "y": 829.934448242188
                }
            },
            "name": "vertex_data",
            "type": "polymesh/vertex_data"
        },
        "vertex_shader_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 76.7322463989258,
                    "y": 991.240905761719
                }
            },
            "name": "vertex_shader",
            "ports": {
                "source": "#version 140\n\nout vec3 colour;\n \nin vec3 P;\nin vec3 N;\n\nuniform mat4 iProjection;\nuniform mat4 iModelView;\nuniform mat4 iModelViewNormal;\n\nuniform float time; \n\n// constant \"colour\" of the surface\nvec3 diffuse_color = vec3(1, 0.5, 0.5);\n// \"shininess\" parameter\nfloat alpha = 4.0;\n\nvoid main() {\n\t// light position, as a circular trajectory\n\tvec3 light_pos = vec3(sin(time * 3.14 / 5), 0, cos(time * 3.14 / 5)) * 20.0;\n\t// surface position (scaling down the teapot)\n\tvec3 surface_pos = P * 0.1;\n\n\t// light direction from the surface\n\tvec3 light_vector = normalize(light_pos - surface_pos);\n\t// surface normal (as read from the input file)\n\tvec3 normal = normalize(N);\n\n\t// lambertial term\n\tcolour = vec3(max(0.0, dot(light_vector, normal))) * diffuse_color;\n\n\t// reflection vector\n\tvec3 reflection = 2.0*dot(light_vector, normal)*normal - light_vector;\n\t// camera position, as the inverse of the scene transformation\n\tvec3 campos = vec3(inverse(iModelView) * vec4(0,0,0,1));\n\t// view vector, determined from the modelview matrix and surface position\n\tvec3 view = normalize(campos + surface_pos);\n\t\n\t// phong reflective term\n\tcolour += pow(max(0.0, dot(reflection, view)), alpha);\n\n\t// perspective projection for rasterisation\n   \tgl_Position = iProjection * iModelView * vec4(surface_pos, 1);\n} \n"
            },
            "type": "render/vertex_shader"
        },
        "vertex_shader_1": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": -70.0831451416016,
                    "y": 618.7275390625
                }
            },
            "name": "vertex_shader",
            "ports": {
                "source": "#version 130 \n\nin vec3 P;\n\nuniform mat4 iProjection;\nuniform mat4 iModelView;\n\nuniform float time;\n \nvoid main() {\n\tvec3 light_pos = vec3(sin(time * 3.14 / 5), 0, cos(time * 3.14 / 5)) * 20.0;\n\n\tvec4 pos4 = vec4(P + light_pos, 1);\n   \tgl_Position = iProjection * iModelView * pos4;\n} \n"
            },
            "type": "render/vertex_shader"
        },
        "viewport_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 436.936431884766,
                    "y": 569.118530273438
                }
            },
            "name": "viewport",
            "type": "render/uniforms/viewport"
        }
    },
    "scene_config": {
        "end_time": 5.0,
        "fps": 24.0,
        "start_time": 0.0
    },
    "ui_geometry": "AdnQywADAAAAAAAAAAAAAQAABqoAAAOfAAAAAAAAABkAAAQ6AAACWQAAAAACAAAABqsAAAAAAAAAFwAABqoAAAOf",
    "ui_state": "AAAA/wAAAAD9AAAAAgAAAAAAAAIRAAAC+fwCAAAAAfsAAAAKAGcAcgBhAHAAaAEAAAB1AAAC+QAAAJgBAAADAAAAAQAAAiIAAAL5/AIAAAAC+wAAABQAcAByAG8AcABlAHIAdABpAGUAcwAAAABrAAAA5wAAAHYBAAAD+wAAAAwAZQBkAGkAdABvAHIBAAAAdQAAAvkAAACqAQAAAwAAAnYAAAL5AAAABAAAAAQAAAAIAAAACPwAAAAA"
}